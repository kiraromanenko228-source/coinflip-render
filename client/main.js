const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const path = require('path');

let mainWindow;

function createWindow() {
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false
        },
        fullscreen: true,
        icon: path.join(__dirname, 'assets/icon.png'),
        title: 'CoinFlip Casino üé∞',
        show: false
    });

    mainWindow.loadFile('src/index.html');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∫–æ–≥–¥–∞ –≤—Å—ë –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    mainWindow.once('ready-to-show', () => {
        mainWindow.show();
        mainWindow.focus();
    });

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º DevTools –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    // mainWindow.webContents.openDevTools();
}

// üé∞ –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –î–õ–Ø –û–î–ò–ù–û–ß–ù–û–ô –ò–ì–†–´
const SmartSinglePlayerSystem = {
    playerStats: new Map(),
    
    calculateWinProbability(playerId, betAmount, currentBalance) {
        const stats = this.getPlayerStats(playerId);
        const totalGames = stats.wins + stats.losses;
        const balanceRatio = currentBalance / 1000; // –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 1000
        
        // üéÅ –ó–ê–ú–ê–ù–ò–í–ê–ù–ò–ï –ù–û–í–ò–ß–ö–û–í
        if (totalGames < 3) {
            console.log(`üéÅ –û–¥–∏–Ω–æ—á–Ω–∞—è: –Ω–æ–≤–∏—á–æ–∫ ${playerId} - —à–∞–Ω—Å 75%`);
            return 0.75;
        }
        
        // üîÅ –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø –ü–û–°–õ–ï –ü–†–û–ò–ì–†–´–®–ï–ô
        if (stats.lossStreak >= 2) {
            console.log(`üîÅ –û–¥–∏–Ω–æ—á–Ω–∞—è: –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–æ—Å–ª–µ ${stats.lossStreak} –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π - 65%`);
            return 0.65;
        }
        
        // üìâ –ö–û–ù–¢–†–û–õ–¨ –ë–ê–õ–ê–ù–°–ê
        if (balanceRatio > 1.8) {
            console.log(`üìâ –û–¥–∏–Ω–æ—á–Ω–∞—è: –±–∞–ª–∞–Ω—Å x${balanceRatio.toFixed(1)} - —Å–ª–∏–≤ 20%`);
            return 0.2;
        }
        
        if (balanceRatio > 1.3) {
            console.log(`üìâ –û–¥–∏–Ω–æ—á–Ω–∞—è: –±–∞–ª–∞–Ω—Å x${balanceRatio.toFixed(1)} - —Å–Ω–∏–∂–µ–Ω–∏–µ 35%`);
            return 0.35;
        }
        
        // üí∏ –ö–†–£–ü–ù–´–ï –°–¢–ê–í–ö–ò
        if (betAmount > 300) {
            console.log(`üí∏ –û–¥–∏–Ω–æ—á–Ω–∞—è: –∫—Ä—É–ø–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ${betAmount} - —à–∞–Ω—Å 30%`);
            return 0.3;
        }
        
        // üé∞ –°–¢–ê–ù–î–ê–†–¢
        console.log(`üé∞ –û–¥–∏–Ω–æ—á–Ω–∞—è: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–Ω—Å 45%`);
        return 0.45;
    },
    
    getPlayerStats(playerId) {
        if (!this.playerStats.has(playerId)) {
            this.playerStats.set(playerId, {
                wins: 0,
                losses: 0,
                winStreak: 0,
                lossStreak: 0,
                totalWagered: 0,
                registeredAt: Date.now()
            });
        }
        return this.playerStats.get(playerId);
    },
    
    updatePlayerStats(playerId, won, amount) {
        const stats = this.getPlayerStats(playerId);
        stats.totalWagered += amount;
        
        if (won) {
            stats.wins++;
            stats.winStreak++;
            stats.lossStreak = 0;
        } else {
            stats.losses++;
            stats.lossStreak++;
            stats.winStreak = 0;
        }
        
        console.log(`üìä –û–¥–∏–Ω–æ—á–Ω–∞—è ${playerId}: ${won ? '–ü–û–ë–ï–î–ê' : '–ü–†–û–ò–ì–†–´–®'} | –°–µ—Ä–∏—è: ${won ? stats.winStreak : stats.lossStreak} | –í—Å–µ–≥–æ –∏–≥—Ä: ${stats.wins + stats.losses}`);
    }
};

app.whenReady().then(() => {
    createWindow();
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    dialog.showMessageBox(mainWindow, {
        type: 'info',
        title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
        message: 'CoinFlip Casino üé∞',
        detail: '–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —à–∞–Ω—Å–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.'
    });
});

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// üî• –£–ú–ù–ê–Ø –û–î–ò–ù–û–ß–ù–ê–Ø –ò–ì–†–ê –° –°–ò–°–¢–ï–ú–û–ô –ó–ê–ú–ê–ù–ò–í–ê–ù–ò–Ø/–°–õ–ò–í–ê
ipcMain.handle('flip-coin-single', async (event, playerId, bet, amount, currentBalance = 1000) => {
    // –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –†–ê–°–ß–ï–¢–ê –®–ê–ù–°–û–í
    const winProbability = SmartSinglePlayerSystem.calculateWinProbability(playerId, amount, currentBalance);
    const playerWins = Math.random() < winProbability;
    const result = playerWins ? bet : (bet === 'heads' ? 'tails' : 'heads');
    
    const win = result === bet;
    const commission = Math.floor(amount * 0.1);
    const winAmount = win ? (amount * 2) - commission : 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
    SmartSinglePlayerSystem.updatePlayerStats(playerId, win, amount);
    
    console.log(`üé∞ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞: ${playerId} | –°—Ç–∞–≤–∫–∞: ${bet} | –í—ã–ø–∞–ª–æ: ${result} | ${win ? '–ü–û–ë–ï–î–ê' : '–ü–†–û–ò–ì–†–´–®'} | –®–∞–Ω—Å: ${(winProbability * 100).toFixed(1)}%`);
    
    return {
        result: result,
        win: win,
        winAmount: winAmount,
        commission: commission
    };
});
